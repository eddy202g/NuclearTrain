(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_short_integer =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content : short_short_integer }
 
 function short_short_integer__ref_short_short_integer__content__projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref_short_short_integer__content__projection
 
 meta "inline:no" function short_short_integer__ref_short_short_integer__content__projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer as Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_integer =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content : short_integer }
 
 function short_integer__ref_short_integer__content__projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref_short_integer__content__projection
 
 meta "inline:no" function short_integer__ref_short_integer__content__projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer as Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content : integer }
 
 function integer__ref_integer__content__projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref_integer__content__projection
 
 meta "inline:no" function integer__ref_integer__content__projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer as Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content : long_integer }
 
 function long_integer__ref_long_integer__content__projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref_long_integer__content__projection
 
 meta "inline:no" function long_integer__ref_long_integer__content__projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer as Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content : long_long_integer }
 
 function long_long_integer__ref_long_long_integer__content__projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref_long_long_integer__content__projection
 
 meta "inline:no" function long_long_integer__ref_long_long_integer__content__projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer as Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type natural =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content : natural }
 
 function natural__ref_natural__content__projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref_natural__content__projection
 
 meta "inline:no" function natural__ref_natural__content__projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural as Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type positive =
  < range 1 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content : positive }
 
 function positive__ref_positive__content__projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref_positive__content__projection
 
 meta "inline:no" function positive__ref_positive__content__projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive as Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type short_float 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content : short_float }
 
 function short_float__ref_short_float__content__projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref_short_float__content__projection
 
 meta "inline:no" function short_float__ref_short_float__content__projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float as Standard__short_float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type float__ 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = float__, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float____ref =
  { mutable float____content : float__ }
 
 function float____ref_float____content__projection 
   (a : float____ref) : float__ =
  a.float____content
 
 meta "model_projection" function float____ref_float____content__projection
 
 meta "inline:no" function float____ref_float____content__projection
 
 val float____havoc 
   (x : float____ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float as Standard__float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__float.float__, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64

 type long_float 
 
 val constant first 
   : Float64.t
  ensures { result =  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)) }
 
 val constant last 
   : Float64.t
  ensures { result =  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t) }
 
 predicate in_range 
   (x : Float64.t) =
  (Float64.t'isFinite x)
 val in_range 
   (x : Float64.t) : bool
  ensures { result <-> in_range (x : Float64.t) }
 
 clone export "ada__model".Static_Float64 with axiom .,
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content : long_float }
 
 function long_float__ref_long_float__content__projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref_long_float__content__projection
 
 meta "inline:no" function long_float__ref_long_float__content__projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float as Standard__long_float
 use        "_gnatprove_standard".Float64 as Float64
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float64 with axiom .,
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (255 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content : character }
 
 function character__ref_character__content__projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref_character__content__projection
 
 meta "inline:no" function character__ref_character__content__projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character as Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (65535 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content : wide_character }
 
 function wide_character__ref_wide_character__content__projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref_wide_character__content__projection
 
 meta "inline:no" function wide_character__ref_wide_character__content__projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character as Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content : wide_wide_character }
 
 function wide_wide_character__ref_wide_wide_character__content__projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref_wide_wide_character__content__projection
 
 meta "inline:no" function wide_wide_character__ref_wide_wide_character__content__projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type string__ref =
  { mutable string__content : string }
 
 function string__ref_string__content__projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref_string__content__projection
 
 meta "inline:no" function string__ref_string__content__projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module defining to_string/of_string functions, created in Gnat2Why.Types.Translate_Type *)
module Standard_String__Img
 use        "int".Int
 use        Standard__string as Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function to_string 
   (x : Main.__image) (s : int) : Standard__string.string
 
 val function from_string 
   (x : Standard__string.string) : Main.__image
 
 axiom to_string__first :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ((Standard__string.first (to_string x s)) = (1 : int))))
 
 axiom to_string__length :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ( (s >= (0 : int)) -> ((Standard__string.length (to_string x s)) <= s) )))

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character
 use        Standard__wide_character__rep as Standard__wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character__rep as Standard__wide_character__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_character as Standard__wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_string__ref =
  { mutable wide_string__content : wide_string }
 
 function wide_string__ref_wide_string__content__projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref_wide_string__content__projection
 
 meta "inline:no" function wide_string__ref_wide_string__content__projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content : wide_wide_string }
 
 function wide_wide_string__ref_wide_wide_string__content__projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref_wide_wide_string__content__projection
 
 meta "inline:no" function wide_wide_string__ref_wide_wide_string__content__projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 function num_small 
   : int =
  (1 : int)
 
 function den_small 
   : int =
  (1000000000 : int)
 
 clone export "ada__model".Fixed_Point_Rep with axiom .,
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 type duration 
 
 val constant num_small 
   : Main.__fixed
  ensures { result =  (1 : int) }
 
 val constant den_small 
   : Main.__fixed
  ensures { result =  (1000000000 : int) }
 
 val constant first 
   : Main.__fixed
  ensures { result =  ( ( -9223372036854775808 ) : int ) }
 
 val constant last 
   : Main.__fixed
  ensures { result =  ( 9223372036854775807 : int ) }
 
 predicate in_range 
   (x : Main.__fixed) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : Main.__fixed) : bool
  ensures { result <-> in_range (x : Main.__fixed) }
 
 clone export "ada__model".Static_Fixed_Point with axiom .,
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content : duration }
 
 function duration__ref_duration__content__projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref_duration__content__projection
 
 meta "inline:no" function duration__ref_duration__content__projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration__rep
 use        Standard__duration as Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Fixed with axiom .,
 type t = Standard__duration.duration, 
 predicate in_range = Standard__duration.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_8 =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content : integer_8 }
 
 function integer_8__ref_integer_8__content__projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref_integer_8__content__projection
 
 meta "inline:no" function integer_8__ref_integer_8__content__projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8 as Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content : integer_16 }
 
 function integer_16__ref_integer_16__content__projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref_integer_16__content__projection
 
 meta "inline:no" function integer_16__ref_integer_16__content__projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16 as Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content : integer_32 }
 
 function integer_32__ref_integer_32__content__projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref_integer_32__content__projection
 
 meta "inline:no" function integer_32__ref_integer_32__content__projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32 as Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content : integer_64 }
 
 function integer_64__ref_integer_64__content__projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref_integer_64__content__projection
 
 meta "inline:no" function integer_64__ref_integer_64__content__projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64 as Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content : universal_integer }
 
 function universal_integer__ref_universal_integer__content__projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref_universal_integer__content__projection
 
 meta "inline:no" function universal_integer__ref_universal_integer__content__projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer as Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TtemperaturelevelB" defined at reactor.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Reactor__TtemperaturelevelB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type ttemperaturelevelB =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = ttemperaturelevelB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type ttemperaturelevelB__ref =
  { mutable ttemperaturelevelB__content : ttemperaturelevelB }
 
 function ttemperaturelevelB__ref_ttemperaturelevelB__content__projection 
   (a : ttemperaturelevelB__ref) : ttemperaturelevelB =
  a.ttemperaturelevelB__content
 
 meta "model_projection" function ttemperaturelevelB__ref_ttemperaturelevelB__content__projection
 
 meta "inline:no" function ttemperaturelevelB__ref_ttemperaturelevelB__content__projection
 
 val ttemperaturelevelB__havoc 
   (x : ttemperaturelevelB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TtemperaturelevelB" defined at reactor.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Reactor__TtemperaturelevelB__rep
 use        Reactor__TtemperaturelevelB as Reactor__TtemperaturelevelB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Reactor__TtemperaturelevelB.ttemperaturelevelB) : int =
  (Reactor__TtemperaturelevelB.ttemperaturelevelB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Reactor__TtemperaturelevelB.ttemperaturelevelB, 
 predicate in_range = Reactor__TtemperaturelevelB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "temperaturelevel" defined at reactor.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Reactor__temperaturelevel
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type temperaturelevel =
  < range 0 100 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (100 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = temperaturelevel, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type temperaturelevel__ref =
  { mutable temperaturelevel__content : temperaturelevel }
 
 function temperaturelevel__ref_temperaturelevel__content__projection 
   (a : temperaturelevel__ref) : temperaturelevel =
  a.temperaturelevel__content
 
 meta "model_projection" function temperaturelevel__ref_temperaturelevel__content__projection
 
 meta "inline:no" function temperaturelevel__ref_temperaturelevel__content__projection
 
 val temperaturelevel__havoc 
   (x : temperaturelevel__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "temperaturelevel" defined at reactor.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Reactor__temperaturelevel__rep
 use        Reactor__temperaturelevel as Reactor__temperaturelevel
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Reactor__temperaturelevel.temperaturelevel) : int =
  (Reactor__temperaturelevel.temperaturelevel'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Reactor__temperaturelevel.temperaturelevel, 
 predicate in_range = Reactor__temperaturelevel.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TwaterlevelB" defined at reactor.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Reactor__TwaterlevelB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type twaterlevelB =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = twaterlevelB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type twaterlevelB__ref =
  { mutable twaterlevelB__content : twaterlevelB }
 
 function twaterlevelB__ref_twaterlevelB__content__projection 
   (a : twaterlevelB__ref) : twaterlevelB =
  a.twaterlevelB__content
 
 meta "model_projection" function twaterlevelB__ref_twaterlevelB__content__projection
 
 meta "inline:no" function twaterlevelB__ref_twaterlevelB__content__projection
 
 val twaterlevelB__havoc 
   (x : twaterlevelB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TwaterlevelB" defined at reactor.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Reactor__TwaterlevelB__rep
 use        Reactor__TwaterlevelB as Reactor__TwaterlevelB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Reactor__TwaterlevelB.twaterlevelB) : int =
  (Reactor__TwaterlevelB.twaterlevelB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Reactor__TwaterlevelB.twaterlevelB, 
 predicate in_range = Reactor__TwaterlevelB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "waterlevel" defined at reactor.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Reactor__waterlevel
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type waterlevel =
  < range 0 100 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (100 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = waterlevel, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type waterlevel__ref =
  { mutable waterlevel__content : waterlevel }
 
 function waterlevel__ref_waterlevel__content__projection 
   (a : waterlevel__ref) : waterlevel =
  a.waterlevel__content
 
 meta "model_projection" function waterlevel__ref_waterlevel__content__projection
 
 meta "inline:no" function waterlevel__ref_waterlevel__content__projection
 
 val waterlevel__havoc 
   (x : waterlevel__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "waterlevel" defined at reactor.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Reactor__waterlevel__rep
 use        Reactor__waterlevel as Reactor__waterlevel
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Reactor__waterlevel.waterlevel) : int =
  (Reactor__waterlevel.waterlevel'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Reactor__waterlevel.waterlevel, 
 predicate in_range = Reactor__waterlevel.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TeleclevelB" defined at reactor.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Reactor__TeleclevelB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type teleclevelB =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = teleclevelB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type teleclevelB__ref =
  { mutable teleclevelB__content : teleclevelB }
 
 function teleclevelB__ref_teleclevelB__content__projection 
   (a : teleclevelB__ref) : teleclevelB =
  a.teleclevelB__content
 
 meta "model_projection" function teleclevelB__ref_teleclevelB__content__projection
 
 meta "inline:no" function teleclevelB__ref_teleclevelB__content__projection
 
 val teleclevelB__havoc 
   (x : teleclevelB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TeleclevelB" defined at reactor.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Reactor__TeleclevelB__rep
 use        Reactor__TeleclevelB as Reactor__TeleclevelB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Reactor__TeleclevelB.teleclevelB) : int =
  (Reactor__TeleclevelB.teleclevelB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Reactor__TeleclevelB.teleclevelB, 
 predicate in_range = Reactor__TeleclevelB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "eleclevel" defined at reactor.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Reactor__eleclevel
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type eleclevel =
  < range 0 1000 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (1000 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = eleclevel, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type eleclevel__ref =
  { mutable eleclevel__content : eleclevel }
 
 function eleclevel__ref_eleclevel__content__projection 
   (a : eleclevel__ref) : eleclevel =
  a.eleclevel__content
 
 meta "model_projection" function eleclevel__ref_eleclevel__content__projection
 
 meta "inline:no" function eleclevel__ref_eleclevel__content__projection
 
 val eleclevel__havoc 
   (x : eleclevel__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "eleclevel" defined at reactor.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Reactor__eleclevel__rep
 use        Reactor__eleclevel as Reactor__eleclevel
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Reactor__eleclevel.eleclevel) : int =
  (Reactor__eleclevel.eleclevel'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Reactor__eleclevel.eleclevel, 
 predicate in_range = Reactor__eleclevel.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "runningoveroff" defined at reactor.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Reactor__runningoveroff
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type runningoveroff 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = runningoveroff, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type runningoveroff__ref =
  { mutable runningoveroff__content : runningoveroff }
 
 function runningoveroff__ref_runningoveroff__content__projection 
   (a : runningoveroff__ref) : runningoveroff =
  a.runningoveroff__content
 
 meta "model_projection" function runningoveroff__ref_runningoveroff__content__projection
 
 meta "inline:no" function runningoveroff__ref_runningoveroff__content__projection
 
 val runningoveroff__havoc 
   (x : runningoveroff__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "runningoveroff" defined at reactor.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Reactor__runningoveroff__rep
 use        Reactor__runningoveroff as Reactor__runningoveroff
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Reactor__runningoveroff.runningoveroff, 
 predicate in_range = Reactor__runningoveroff.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "reactorstate" defined at reactor.ads:10, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Reactor__reactorstate__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Reactor__temperaturelevel as Reactor__temperaturelevel
 use        Reactor__temperaturelevel__rep as Reactor__temperaturelevel__rep
 use        Reactor__waterlevel as Reactor__waterlevel
 use        Reactor__waterlevel__rep as Reactor__waterlevel__rep
 use        Reactor__eleclevel as Reactor__eleclevel
 use        Reactor__eleclevel__rep as Reactor__eleclevel__rep
 use        Reactor__runningoveroff as Reactor__runningoveroff
 use        Reactor__runningoveroff__rep as Reactor__runningoveroff__rep

 type __split_fields =
  { rec__reactor__reactorstate__temp [@model_trace:.2566] [@name:temp] : Reactor__temperaturelevel.temperaturelevel; rec__reactor__reactorstate__water [@name:water] [@model_trace:.2576] : Reactor__waterlevel.waterlevel; rec__reactor__reactorstate__electricity [@name:electricity] [@model_trace:.2586] : Reactor__eleclevel.eleclevel; rec__reactor__reactorstate__status [@model_trace:.2596] [@name:status] : Reactor__runningoveroff.runningoveroff }
 
 function __split_fields_rec__reactor__reactorstate__temp__projection [@model_trace:.2566] [@name:temp] 
   (a : __split_fields) : Reactor__temperaturelevel.temperaturelevel =
  a.rec__reactor__reactorstate__temp
 
 meta "model_projection" function __split_fields_rec__reactor__reactorstate__temp__projection
 
 meta "inline:no" function __split_fields_rec__reactor__reactorstate__temp__projection
 
 function __split_fields_rec__reactor__reactorstate__water__projection [@name:water] [@model_trace:.2576] 
   (a : __split_fields) : Reactor__waterlevel.waterlevel =
  a.rec__reactor__reactorstate__water
 
 meta "model_projection" function __split_fields_rec__reactor__reactorstate__water__projection
 
 meta "inline:no" function __split_fields_rec__reactor__reactorstate__water__projection
 
 function __split_fields_rec__reactor__reactorstate__electricity__projection [@name:electricity] [@model_trace:.2586] 
   (a : __split_fields) : Reactor__eleclevel.eleclevel =
  a.rec__reactor__reactorstate__electricity
 
 meta "model_projection" function __split_fields_rec__reactor__reactorstate__electricity__projection
 
 meta "inline:no" function __split_fields_rec__reactor__reactorstate__electricity__projection
 
 function __split_fields_rec__reactor__reactorstate__status__projection [@model_trace:.2596] [@name:status] 
   (a : __split_fields) : Reactor__runningoveroff.runningoveroff =
  a.rec__reactor__reactorstate__status
 
 meta "model_projection" function __split_fields_rec__reactor__reactorstate__status__projection
 
 meta "inline:no" function __split_fields_rec__reactor__reactorstate__status__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__projection
 
 meta "inline:no" function __rep___split_fields__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate reactor__reactorstate__temp__pred 
   (a : __rep) =
  true
 val reactor__reactorstate__temp__pred 
   (a : __rep) : bool
  ensures { result <-> reactor__reactorstate__temp__pred (a : __rep) }
 
 val rec__reactor__reactorstate__temp_ 
   (a : __rep) : Reactor__temperaturelevel.temperaturelevel
  requires {  (reactor__reactorstate__temp__pred a) }
  ensures {  (result = a.__split_fields.rec__reactor__reactorstate__temp) }
 
 predicate reactor__reactorstate__water__pred 
   (a : __rep) =
  true
 val reactor__reactorstate__water__pred 
   (a : __rep) : bool
  ensures { result <-> reactor__reactorstate__water__pred (a : __rep) }
 
 val rec__reactor__reactorstate__water_ 
   (a : __rep) : Reactor__waterlevel.waterlevel
  requires {  (reactor__reactorstate__water__pred a) }
  ensures {  (result = a.__split_fields.rec__reactor__reactorstate__water) }
 
 predicate reactor__reactorstate__electricity__pred 
   (a : __rep) =
  true
 val reactor__reactorstate__electricity__pred 
   (a : __rep) : bool
  ensures { result <-> reactor__reactorstate__electricity__pred (a : __rep) }
 
 val rec__reactor__reactorstate__electricity_ 
   (a : __rep) : Reactor__eleclevel.eleclevel
  requires {  (reactor__reactorstate__electricity__pred a) }
  ensures {  (result = a.__split_fields.rec__reactor__reactorstate__electricity) }
 
 predicate reactor__reactorstate__status__pred 
   (a : __rep) =
  true
 val reactor__reactorstate__status__pred 
   (a : __rep) : bool
  ensures { result <-> reactor__reactorstate__status__pred (a : __rep) }
 
 val rec__reactor__reactorstate__status_ 
   (a : __rep) : Reactor__runningoveroff.runningoveroff
  requires {  (reactor__reactorstate__status__pred a) }
  ensures {  (result = a.__split_fields.rec__reactor__reactorstate__status) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ( ((Reactor__temperaturelevel__rep.to_rep a.__split_fields.rec__reactor__reactorstate__temp) = (Reactor__temperaturelevel__rep.to_rep b.__split_fields.rec__reactor__reactorstate__temp)) /\ ((Reactor__waterlevel__rep.to_rep a.__split_fields.rec__reactor__reactorstate__water) = (Reactor__waterlevel__rep.to_rep b.__split_fields.rec__reactor__reactorstate__water)) )/\( ((Reactor__eleclevel__rep.to_rep a.__split_fields.rec__reactor__reactorstate__electricity) = (Reactor__eleclevel__rep.to_rep b.__split_fields.rec__reactor__reactorstate__electricity))/\((Reactor__runningoveroff__rep.to_rep a.__split_fields.rec__reactor__reactorstate__status) = (Reactor__runningoveroff__rep.to_rep b.__split_fields.rec__reactor__reactorstate__status)) ) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "reactorstate" defined at reactor.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Reactor__reactorstate
 use export Reactor__reactorstate__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type reactorstate =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant reactor__reactorstate__temp__first__bit 
   : int

 
 val constant reactor__reactorstate__temp__last__bit 
   : int

 
 val constant reactor__reactorstate__temp__position 
   : int

 
 axiom reactor__reactorstate__temp__first__bit_axiom :
  ((reactor__reactorstate__temp__first__bit ) >= (0 : int))
 
 axiom reactor__reactorstate__temp__last__bit_axiom :
  ((reactor__reactorstate__temp__last__bit ) > (reactor__reactorstate__temp__first__bit ))
 
 axiom reactor__reactorstate__temp__position_axiom :
  ((reactor__reactorstate__temp__position ) >= (0 : int))
 
 val constant reactor__reactorstate__water__first__bit 
   : int

 
 val constant reactor__reactorstate__water__last__bit 
   : int

 
 val constant reactor__reactorstate__water__position 
   : int

 
 axiom reactor__reactorstate__water__first__bit_axiom :
  ((reactor__reactorstate__water__first__bit ) >= (0 : int))
 
 axiom reactor__reactorstate__water__last__bit_axiom :
  ((reactor__reactorstate__water__last__bit ) > (reactor__reactorstate__water__first__bit ))
 
 axiom reactor__reactorstate__water__position_axiom :
  ((reactor__reactorstate__water__position ) >= (0 : int))
 
 val constant reactor__reactorstate__electricity__first__bit 
   : int

 
 val constant reactor__reactorstate__electricity__last__bit 
   : int

 
 val constant reactor__reactorstate__electricity__position 
   : int

 
 axiom reactor__reactorstate__electricity__first__bit_axiom :
  ((reactor__reactorstate__electricity__first__bit ) >= (0 : int))
 
 axiom reactor__reactorstate__electricity__last__bit_axiom :
  ((reactor__reactorstate__electricity__last__bit ) > (reactor__reactorstate__electricity__first__bit ))
 
 axiom reactor__reactorstate__electricity__position_axiom :
  ((reactor__reactorstate__electricity__position ) >= (0 : int))
 
 val constant reactor__reactorstate__status__first__bit 
   : int

 
 val constant reactor__reactorstate__status__last__bit 
   : int

 
 val constant reactor__reactorstate__status__position 
   : int

 
 axiom reactor__reactorstate__status__first__bit_axiom :
  ((reactor__reactorstate__status__first__bit ) >= (0 : int))
 
 axiom reactor__reactorstate__status__last__bit_axiom :
  ((reactor__reactorstate__status__last__bit ) > (reactor__reactorstate__status__first__bit ))
 
 axiom reactor__reactorstate__status__position_axiom :
  ((reactor__reactorstate__status__position ) >= (0 : int))
 
 val function user_eq 
   (a : reactorstate) (b : reactorstate) : bool
 
 val constant dummy 
   : reactorstate

 
 type reactorstate__ref =
  { mutable reactorstate__content : reactorstate }
 
 function reactorstate__ref_reactorstate__content__projection 
   (a : reactorstate__ref) : reactorstate =
  a.reactorstate__content
 
 meta "model_projection" function reactorstate__ref_reactorstate__content__projection
 
 meta "inline:no" function reactorstate__ref_reactorstate__content__projection
 
 val reactorstate__havoc 
   (x : reactorstate__ref) : unit
  writes {x}

end

(* Module for possibly declaring a logic function for "initialreactorstate" defined at reactor.ads:25, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Reactor__initialreactorstate
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Reactor__reactorstate as Reactor__reactorstate

 val function initialreactorstate 
   (__void_param : unit) : Reactor__reactorstate.reactorstate
 
 val predicate initialreactorstate__function_guard 
   (temp___result_154 : Reactor__reactorstate.reactorstate) (__void_param : unit)

end
(* Module for defining a ref holding the value of variable "reactor" defined at reactor.ads:17, created in Gnat2Why.Decls.Translate_Variable *)
module Reactor__increasetemp__reactor
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Reactor__reactorstate as Reactor__reactorstate

 val reactor__split_fields [#"reactor.ads" 17 0 0][@model_projected] [@model_trace:2615] [@name:reactor]  : Reactor__reactorstate.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "reactor" defined at reactor.ads:17, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Reactor__increasetemp__reactor___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "reactor" defined at reactor.ads:21, created in Gnat2Why.Decls.Translate_Variable *)
module Reactor__decreasetemp__reactor
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Reactor__reactorstate as Reactor__reactorstate

 val reactor__split_fields [#"reactor.ads" 21 0 0][@model_trace:2676] [@model_projected] [@name:reactor]  : Reactor__reactorstate.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "reactor" defined at reactor.ads:21, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Reactor__decreasetemp__reactor___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "initialstate" defined at reactor.adb:26, created in Gnat2Why.Decls.Translate_Variable *)
module Reactor__initialreactorstate__initialstate
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Reactor__reactorstate as Reactor__reactorstate

 val initialstate__split_fields [#"reactor.adb" 26 0 0][@model_projected] [@model_trace:2439] [@name:initialstate]  : Reactor__reactorstate.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "initialstate" defined at reactor.adb:26, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Reactor__initialreactorstate__initialstate___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_short_integer as Standard__short_short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_5 : int) (temp___skip_top_level_6 : bool) }

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_integer as Standard__short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_12 : int) (temp___skip_top_level_13 : bool) }

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_19 : int) (temp___skip_top_level_20 : bool) }

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_integer as Standard__long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_26 : int) (temp___skip_top_level_27 : bool) }

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_long_integer as Standard__long_long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_33 : int) (temp___skip_top_level_34 : bool) }

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural as Standard__natural

 predicate dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_40 : int) (temp___skip_top_level_41 : bool) }

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive as Standard__positive

 predicate dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_47 : int) (temp___skip_top_level_48 : bool) }

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__short_float as Standard__short_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) }

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__float as Standard__float

 predicate dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) }

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64
 use        Standard__long_float as Standard__long_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) }

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_75 : int) (temp___skip_top_level_76 : bool) }

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_82 : int) (temp___skip_top_level_83 : bool) }

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_89 : int) (temp___skip_top_level_90 : bool) }

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string

 predicate dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))
 val dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) }

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_string as Standard__wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))
 val dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) }

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_string as Standard__wide_wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))
 val dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) }

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__duration as Standard__duration

 predicate dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) =
  (if (( temp___is_init_112 \/ (Standard__duration.first <= Standard__duration.last) )) then (
   (Standard__duration.dynamic_property Standard__duration.first Standard__duration.last temp___expr_116)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) }

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_8 as Standard__integer_8

 predicate dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_124 : int) (temp___skip_top_level_125 : bool) }

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_16 as Standard__integer_16

 predicate dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_131 : int) (temp___skip_top_level_132 : bool) }

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_32 as Standard__integer_32

 predicate dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_138 : int) (temp___skip_top_level_139 : bool) }

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_64 as Standard__integer_64

 predicate dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_145 : int) (temp___skip_top_level_146 : bool) }

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__universal_integer as Standard__universal_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_152 : int) (temp___skip_top_level_153 : bool) }

end

(* Module for possibly declaring a logic function for "increasetemp" defined at reactor.ads:17, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Reactor__increasetemp
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "decreasetemp" defined at reactor.ads:21, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Reactor__decreasetemp
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TtemperaturelevelB" defined at reactor.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Reactor__TtemperaturelevelB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "temperaturelevel" defined at reactor.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Reactor__temperaturelevel___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Reactor__temperaturelevel as Reactor__temperaturelevel

 predicate dynamic_invariant [@inline] 
   (temp___expr_159 : int) (temp___is_init_155 : bool) (temp___skip_constant_156 : bool) (temp___do_toplevel_157 : bool) (temp___do_typ_inv_158 : bool) =
  (if (( temp___is_init_155 \/ (Reactor__temperaturelevel.first <= Reactor__temperaturelevel.last) )) then (
   (Reactor__temperaturelevel.dynamic_property Reactor__temperaturelevel.first Reactor__temperaturelevel.last temp___expr_159)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_159 : int) (temp___is_init_155 : bool) (temp___skip_constant_156 : bool) (temp___do_toplevel_157 : bool) (temp___do_typ_inv_158 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_159 : int) (temp___is_init_155 : bool) (temp___skip_constant_156 : bool) (temp___do_toplevel_157 : bool) (temp___do_typ_inv_158 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_160 : int) (temp___skip_top_level_161 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_160 : int) (temp___skip_top_level_161 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_160 : int) (temp___skip_top_level_161 : bool) }

end

(* Module giving axioms for type "TwaterlevelB" defined at reactor.ads:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Reactor__TwaterlevelB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "waterlevel" defined at reactor.ads:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Reactor__waterlevel___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Reactor__waterlevel as Reactor__waterlevel

 predicate dynamic_invariant [@inline] 
   (temp___expr_166 : int) (temp___is_init_162 : bool) (temp___skip_constant_163 : bool) (temp___do_toplevel_164 : bool) (temp___do_typ_inv_165 : bool) =
  (if (( temp___is_init_162 \/ (Reactor__waterlevel.first <= Reactor__waterlevel.last) )) then (
   (Reactor__waterlevel.dynamic_property Reactor__waterlevel.first Reactor__waterlevel.last temp___expr_166)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_166 : int) (temp___is_init_162 : bool) (temp___skip_constant_163 : bool) (temp___do_toplevel_164 : bool) (temp___do_typ_inv_165 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_166 : int) (temp___is_init_162 : bool) (temp___skip_constant_163 : bool) (temp___do_toplevel_164 : bool) (temp___do_typ_inv_165 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_167 : int) (temp___skip_top_level_168 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_167 : int) (temp___skip_top_level_168 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_167 : int) (temp___skip_top_level_168 : bool) }

end

(* Module giving axioms for type "TeleclevelB" defined at reactor.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Reactor__TeleclevelB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "eleclevel" defined at reactor.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Reactor__eleclevel___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Reactor__eleclevel as Reactor__eleclevel

 predicate dynamic_invariant [@inline] 
   (temp___expr_173 : int) (temp___is_init_169 : bool) (temp___skip_constant_170 : bool) (temp___do_toplevel_171 : bool) (temp___do_typ_inv_172 : bool) =
  (if (( temp___is_init_169 \/ (Reactor__eleclevel.first <= Reactor__eleclevel.last) )) then (
   (Reactor__eleclevel.dynamic_property Reactor__eleclevel.first Reactor__eleclevel.last temp___expr_173)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_173 : int) (temp___is_init_169 : bool) (temp___skip_constant_170 : bool) (temp___do_toplevel_171 : bool) (temp___do_typ_inv_172 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_173 : int) (temp___is_init_169 : bool) (temp___skip_constant_170 : bool) (temp___do_toplevel_171 : bool) (temp___do_typ_inv_172 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_174 : int) (temp___skip_top_level_175 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_174 : int) (temp___skip_top_level_175 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_174 : int) (temp___skip_top_level_175 : bool) }

end

(* Module giving axioms for type "runningoveroff" defined at reactor.ads:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Reactor__runningoveroff___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Reactor__runningoveroff as Reactor__runningoveroff

 predicate dynamic_invariant [@inline] 
   (temp___expr_180 : int) (temp___is_init_176 : bool) (temp___skip_constant_177 : bool) (temp___do_toplevel_178 : bool) (temp___do_typ_inv_179 : bool) =
  (if (( temp___is_init_176 \/ (Reactor__runningoveroff.first <= Reactor__runningoveroff.last) )) then (
   (Reactor__runningoveroff.dynamic_property Reactor__runningoveroff.first Reactor__runningoveroff.last temp___expr_180)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_180 : int) (temp___is_init_176 : bool) (temp___skip_constant_177 : bool) (temp___do_toplevel_178 : bool) (temp___do_typ_inv_179 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_180 : int) (temp___is_init_176 : bool) (temp___skip_constant_177 : bool) (temp___do_toplevel_178 : bool) (temp___do_typ_inv_179 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_181 : int) (temp___skip_top_level_182 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_181 : int) (temp___skip_top_level_182 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_181 : int) (temp___skip_top_level_182 : bool) }

end

(* Module giving axioms for type "reactorstate" defined at reactor.ads:10, created in Gnat2Why.Types.Generate_Type_Completion *)
module Reactor__reactorstate___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Reactor__reactorstate as Reactor__reactorstate

 predicate dynamic_invariant [@inline] 
   (temp___expr_187 : Reactor__reactorstate.reactorstate) (temp___is_init_183 : bool) (temp___skip_constant_184 : bool) (temp___do_toplevel_185 : bool) (temp___do_typ_inv_186 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_187 : Reactor__reactorstate.reactorstate) (temp___is_init_183 : bool) (temp___skip_constant_184 : bool) (temp___do_toplevel_185 : bool) (temp___do_typ_inv_186 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_187 : Reactor__reactorstate.reactorstate) (temp___is_init_183 : bool) (temp___skip_constant_184 : bool) (temp___do_toplevel_185 : bool) (temp___do_typ_inv_186 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_188 : Reactor__reactorstate.reactorstate) (temp___skip_top_level_189 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_188 : Reactor__reactorstate.reactorstate) (temp___skip_top_level_189 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_188 : Reactor__reactorstate.reactorstate) (temp___skip_top_level_189 : bool) }

end
(* Module for declaring a program function (and possibly an axiom) for "increasetemp" defined at reactor.ads:17, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Reactor__increasetemp___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Reactor__reactorstate as Reactor__reactorstate
 use        Reactor__reactorstate___axiom as Reactor__reactorstate___axiom
 use        Reactor__temperaturelevel as Reactor__temperaturelevel
 use        Reactor__temperaturelevel__rep as Reactor__temperaturelevel__rep
 use        Reactor__waterlevel as Reactor__waterlevel
 use        Reactor__waterlevel__rep as Reactor__waterlevel__rep
 use        Reactor__eleclevel as Reactor__eleclevel
 use        Reactor__eleclevel__rep as Reactor__eleclevel__rep

 val increasetemp 
   (reactor__split_fields : Reactor__reactorstate.__split_fields__ref) : unit
  requires {  ( ( ( [@GP_Pretty_Ada:2634] ((Reactor__temperaturelevel__rep.to_rep { Reactor__reactorstate.__split_fields = reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__temp) <= (80 : int)) ) /\ ( [@GP_Pretty_Ada:2640] ((Reactor__eleclevel__rep.to_rep { Reactor__reactorstate.__split_fields = reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__electricity) <= (800 : int)) ) ) /\ ( [@GP_Pretty_Ada:2646] ((Reactor__waterlevel__rep.to_rep { Reactor__reactorstate.__split_fields = reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__water) >= (10 : int)) ) ) }
  ensures {  ( ( ( [@GP_Pretty_Ada:2654] ((Reactor__temperaturelevel__rep.to_rep { Reactor__reactorstate.__split_fields = reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__temp) > (Reactor__temperaturelevel__rep.to_rep (old { Reactor__reactorstate.__split_fields = reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__temp ))) ) /\ ( [@GP_Pretty_Ada:2664] ((Reactor__waterlevel__rep.to_rep { Reactor__reactorstate.__split_fields = reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__water) < (Reactor__waterlevel__rep.to_rep (old { Reactor__reactorstate.__split_fields = reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__water ))) ) ) /\ (Reactor__reactorstate___axiom.dynamic_invariant { Reactor__reactorstate.__split_fields = reactor__split_fields.Reactor__reactorstate.__split_fields__content } True True True True) ) }
  writes {reactor__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "decreasetemp" defined at reactor.ads:21, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Reactor__decreasetemp___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Reactor__reactorstate as Reactor__reactorstate
 use        Reactor__reactorstate___axiom as Reactor__reactorstate___axiom
 use        Reactor__temperaturelevel as Reactor__temperaturelevel
 use        Reactor__temperaturelevel__rep as Reactor__temperaturelevel__rep
 use        Reactor__eleclevel as Reactor__eleclevel
 use        Reactor__eleclevel__rep as Reactor__eleclevel__rep

 val decreasetemp 
   (reactor__split_fields : Reactor__reactorstate.__split_fields__ref) : unit
  requires {  ( ( [@GP_Pretty_Ada:2695] ((Reactor__temperaturelevel__rep.to_rep { Reactor__reactorstate.__split_fields = reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__temp) >= (20 : int)) ) /\ ( [@GP_Pretty_Ada:2701] ((Reactor__eleclevel__rep.to_rep { Reactor__reactorstate.__split_fields = reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__electricity) >= (200 : int)) ) ) }
  ensures {  ( ( ( [@GP_Pretty_Ada:2709] ((Reactor__temperaturelevel__rep.to_rep { Reactor__reactorstate.__split_fields = reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__temp) < (Reactor__temperaturelevel__rep.to_rep (old { Reactor__reactorstate.__split_fields = reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__temp ))) ) /\ ( [@GP_Pretty_Ada:2719] ((Reactor__eleclevel__rep.to_rep { Reactor__reactorstate.__split_fields = reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__electricity) < (Reactor__eleclevel__rep.to_rep (old { Reactor__reactorstate.__split_fields = reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__electricity ))) ) ) /\ (Reactor__reactorstate___axiom.dynamic_invariant { Reactor__reactorstate.__split_fields = reactor__split_fields.Reactor__reactorstate.__split_fields__content } True True True True) ) }
  writes {reactor__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "initialreactorstate" defined at reactor.ads:25, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Reactor__initialreactorstate___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Reactor__reactorstate as Reactor__reactorstate
 use        Reactor__reactorstate___axiom as Reactor__reactorstate___axiom
 use        Reactor__initialreactorstate as Reactor__initialreactorstate

 val initialreactorstate 
   (__void_param : unit) : Reactor__reactorstate.reactorstate
  requires {  true }
  ensures {  ( ( (result = (Reactor__initialreactorstate.initialreactorstate ())) /\ (Reactor__initialreactorstate.initialreactorstate__function_guard result ()) )/\(Reactor__reactorstate___axiom.dynamic_invariant result True False True True) ) }
 
 axiom initialreactorstate__post_axiom :
  (forall __void_param   : unit [(Reactor__initialreactorstate.initialreactorstate __void_param)].
   ( true -> (let result = (Reactor__initialreactorstate.initialreactorstate __void_param) in (
    (if ((Reactor__initialreactorstate.initialreactorstate__function_guard result __void_param)) then (
     ( ( true /\ (Reactor__reactorstate___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "reactor" defined at reactor.ads:3, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Reactor__package_def
 use        "_gnatprove_standard".Main
 use        "int".Int

 let def [#"reactor.ads" 3 0 0][@GP_Subp:reactor.ads:3] 
   (__void_param : unit)
  requires { [#"reactor.ads" 3 0 0] true }
   = [@vc:divergent]
  ( ();
  ([#"reactor.ads" 3 0 0] ());
  ([#"reactor.ads" 5 0 0] ());
  ([#"reactor.ads" 6 0 0] ());
  ([#"reactor.ads" 7 0 0] ());
  ([#"reactor.ads" 8 0 0] ());
  ([#"reactor.ads" 10 0 0] ());
  ([#"reactor.ads" 17 0 0] ());
  ([#"reactor.ads" 19 0 0] ());
  ([#"reactor.ads" 18 0 0] ());
  ([#"reactor.ads" 21 0 0] ());
  ([#"reactor.ads" 23 0 0] ());
  ([#"reactor.ads" 22 0 0] ());
  ([#"reactor.ads" 25 0 0] ());
  ([#"reactor.ads" 25 0 0] ());
  ([#"reactor.ads" 25 0 0] ());
  ([#"reactor.ads" 25 0 0] ());
  ([#"reactor.ads" 25 0 0] ());
  ([#"reactor.ads" 25 0 0] ());
  ([#"reactor.ads" 25 0 0] ());
  ([#"reactor.ads" 25 0 0] ());
  ([#"reactor.ads" 25 0 0] ());
  ([#"reactor.ads" 25 0 0] ());
  ([#"reactor.ads" 25 0 0] ());
  ([#"reactor.ads" 25 0 0] ());
  ();
  ([#"reactor.adb" 1 0 0] ());
  ([#"reactor.adb" 4 0 0] ());
  ([#"reactor.adb" 19 0 0] ());
  ([#"reactor.adb" 25 0 0] ());
  ();
  ( [@GP_Sloc:reactor.adb:32:1] ([#"reactor.adb" 32 0 0] ()) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "increasetemp" defined at reactor.ads:17, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Reactor__increasetemp__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Reactor__increasetemp__reactor as Reactor__increasetemp__reactor
 use        Reactor__reactorstate as Reactor__reactorstate
 use        Reactor__reactorstate___axiom as Reactor__reactorstate___axiom
 use        Reactor__temperaturelevel as Reactor__temperaturelevel
 use        Reactor__temperaturelevel__rep as Reactor__temperaturelevel__rep
 use        Reactor__waterlevel as Reactor__waterlevel
 use        Reactor__waterlevel__rep as Reactor__waterlevel__rep
 use        Reactor__eleclevel as Reactor__eleclevel
 use        Reactor__eleclevel__rep as Reactor__eleclevel__rep
 use        Reactor__runningoveroff as Reactor__runningoveroff
 use        Reactor__runningoveroff__rep as Reactor__runningoveroff__rep
 use        Reactor__temperaturelevel___axiom as Reactor__temperaturelevel___axiom
 use        Reactor__waterlevel___axiom as Reactor__waterlevel___axiom
 use        Reactor__eleclevel___axiom as Reactor__eleclevel___axiom
 use        Reactor__runningoveroff___axiom as Reactor__runningoveroff___axiom
 use        Reactor__reactorstate___axiom as Reactor__reactorstate___axiom
 use        Reactor__increasetemp__reactor___axiom as Reactor__increasetemp__reactor___axiom

 let def [#"reactor.ads" 17 0 0][@GP_Subp:reactor.ads:17] 
   (__void_param : unit)
  requires { [#"reactor.ads" 17 0 0] true }
  ensures { [#"reactor.ads" 17 0 0] ([#"reactor.ads" 19 0 0] ( [@GP_Sloc:reactor.ads:19:14] [@GP_Reason:VC_POSTCONDITION] [@comment:     Post => reactor.temp > reactor.temp'Old and reactor.water < reactor.water'Old;              ^ reactor.ads:19:14:VC_POSTCONDITION] [@model_vc_post] [@GP_Id:3] [@GP_Shape:pragargs__and] ( ( [@GP_Sloc:reactor.ads:19:14] [@GP_Pretty_Ada:2654] ((Reactor__temperaturelevel__rep.to_rep { Reactor__reactorstate.__split_fields = Reactor__increasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__temp) > (Reactor__temperaturelevel__rep.to_rep (old { Reactor__reactorstate.__split_fields = Reactor__increasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__temp ))) ) /\ ( [@GP_Pretty_Ada:2664] [@GP_Sloc:reactor.ads:19:50] ((Reactor__waterlevel__rep.to_rep { Reactor__reactorstate.__split_fields = Reactor__increasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__water) < (Reactor__waterlevel__rep.to_rep (old { Reactor__reactorstate.__split_fields = Reactor__increasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__water ))) ) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram reactor.ads:17 *)
  ;
   assume {  (Reactor__reactorstate___axiom.dynamic_invariant { Reactor__reactorstate.__split_fields = Reactor__increasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram reactor.ads:17 *)
  ;
  () (* Check for RTE in the Pre of the subprogram reactor.ads:17 *)
  ;
   begin ensures {true} let _ = (let _ = (Boolean.andb((Boolean.andb(((Reactor__temperaturelevel__rep.to_rep({ Reactor__reactorstate.__split_fields = Reactor__increasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__temp)) <= (80 : int))) (((Reactor__eleclevel__rep.to_rep({ Reactor__reactorstate.__split_fields = Reactor__increasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__electricity)) <= (800 : int))))) (((Reactor__waterlevel__rep.to_rep({ Reactor__reactorstate.__split_fields = Reactor__increasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__water)) >= (10 : int)))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram reactor.ads:17 *)
  ;
   assume {  ( ( ( [@GP_Pretty_Ada:2634] ((Reactor__temperaturelevel__rep.to_rep { Reactor__reactorstate.__split_fields = Reactor__increasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__temp) <= (80 : int)) ) /\ ( [@GP_Pretty_Ada:2640] ((Reactor__eleclevel__rep.to_rep { Reactor__reactorstate.__split_fields = Reactor__increasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__electricity) <= (800 : int)) ) ) /\ ( [@GP_Pretty_Ada:2646] ((Reactor__waterlevel__rep.to_rep { Reactor__reactorstate.__split_fields = Reactor__increasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__water) >= (10 : int)) ) ) };
   begin ensures {true} let _ = (let _ = { Reactor__reactorstate.__split_fields = Reactor__increasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__water in (
   ()))
   in () end ;
  (let temp___old_203 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
  ensures { (result = (Reactor__waterlevel__rep.to_rep { Reactor__reactorstate.__split_fields = Reactor__increasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__water))} 
  in _f) in (
   (  begin ensures {true} let _ = (let _ = { Reactor__reactorstate.__split_fields = Reactor__increasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__temp in (
    ()))
    in () end ;
   (let temp___old_202 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
   ensures { (result = (Reactor__temperaturelevel__rep.to_rep { Reactor__reactorstate.__split_fields = Reactor__increasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__temp))} 
   in _f) in (
    (  try
     ( ();
     ( [@GP_Sloc:reactor.adb:6:7] ([#"reactor.adb" 6 0 0] (if (( ([#"reactor.adb" 6 0 0] [#"reactor.adb" 6 0 0] (([@branch_id=2325] Main.spark__branch).bool__content <- ( (Boolean.andb((Boolean.andb(((Reactor__temperaturelevel__rep.to_rep({ Reactor__reactorstate.__split_fields = Reactor__increasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__temp)) <= (80 : int))) (((Reactor__eleclevel__rep.to_rep({ Reactor__reactorstate.__split_fields = Reactor__increasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__electricity)) <= (800 : int))))) (((Reactor__waterlevel__rep.to_rep({ Reactor__reactorstate.__split_fields = Reactor__increasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__water)) >= (10 : int)))) )));
     ( [@branch_id=2325] Main.spark__branch ).bool__content )) then (
      ( ();
      ( [@GP_Sloc:reactor.adb:7:23] ([#"reactor.adb" 7 0 0] (let temp___195 [@mlw:proxy_symbol] [@introduced] = (let temp___194 [@mlw:proxy_symbol] [@introduced] = { Reactor__reactorstate.__split_fields = Reactor__increasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content } in (
       ( [#"reactor.adb" 7 0 0] begin ensures {true} let _ = (let _ = temp___194.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__temp in (
        ()))
        in () end ;
       { ( temp___194 ) with Reactor__reactorstate.__split_fields = { ( temp___194.Reactor__reactorstate.__split_fields ) with Reactor__reactorstate.rec__reactor__reactorstate__temp = (Reactor__temperaturelevel__rep.of_rep(([#"reactor.adb" 7 0 0] ( [@GP_Sloc:reactor.adb:7:39] [@comment:         reactor.temp := reactor.temp + 20;                                       ^ reactor.adb:7:39:VC_RANGE_CHECK] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:if__reactor_assign__add] [@GP_Id:0] (Reactor__temperaturelevel.range_check_(((Reactor__temperaturelevel__rep.to_rep({ Reactor__reactorstate.__split_fields = Reactor__increasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__temp)) + (20 : int)))) )))) } } )))
       in (
        (Reactor__increasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content <- ( temp___195.Reactor__reactorstate.__split_fields ))))
      ) );
      ( [@GP_Sloc:reactor.adb:8:24] ([#"reactor.adb" 8 0 0] (let temp___197 [@mlw:proxy_symbol] [@introduced] = (let temp___196 [@mlw:proxy_symbol] [@introduced] = { Reactor__reactorstate.__split_fields = Reactor__increasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content } in (
       ( [#"reactor.adb" 8 0 0] begin ensures {true} let _ = (let _ = temp___196.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__water in (
        ()))
        in () end ;
       { ( temp___196 ) with Reactor__reactorstate.__split_fields = { ( temp___196.Reactor__reactorstate.__split_fields ) with Reactor__reactorstate.rec__reactor__reactorstate__water = (Reactor__waterlevel__rep.of_rep(([#"reactor.adb" 8 0 0] ( [@comment:         reactor.water := reactor.water - 10;                                         ^ reactor.adb:8:41:VC_RANGE_CHECK] [@GP_Sloc:reactor.adb:8:41] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:1] [@GP_Shape:if__reactor_assign__sub] (Reactor__waterlevel.range_check_(((Reactor__waterlevel__rep.to_rep({ Reactor__reactorstate.__split_fields = Reactor__increasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__water)) - (10 : int)))) )))) } } )))
       in (
        (Reactor__increasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content <- ( temp___197.Reactor__reactorstate.__split_fields ))))
      ) );
      ( [@GP_Sloc:reactor.adb:9:30] ([#"reactor.adb" 9 0 0] (let temp___199 [@mlw:proxy_symbol] [@introduced] = (let temp___198 [@mlw:proxy_symbol] [@introduced] = { Reactor__reactorstate.__split_fields = Reactor__increasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content } in (
       ( [#"reactor.adb" 9 0 0] begin ensures {true} let _ = (let _ = temp___198.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__electricity in (
        ()))
        in () end ;
       { ( temp___198 ) with Reactor__reactorstate.__split_fields = { ( temp___198.Reactor__reactorstate.__split_fields ) with Reactor__reactorstate.rec__reactor__reactorstate__electricity = (Reactor__eleclevel__rep.of_rep(([#"reactor.adb" 9 0 0] ( [@comment:         reactor.electricity := reactor.electricity + 200;                                                     ^ reactor.adb:9:53:VC_RANGE_CHECK] [@GP_Sloc:reactor.adb:9:53] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:if__reactor_assign__add] [@GP_Id:2] (Reactor__eleclevel.range_check_(((Reactor__eleclevel__rep.to_rep({ Reactor__reactorstate.__split_fields = Reactor__increasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__electricity)) + (200 : int)))) )))) } } )))
       in (
        (Reactor__increasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content <- ( temp___199.Reactor__reactorstate.__split_fields ))))
      ) ) )) else (
      ()))) );
     ( [@GP_Sloc:reactor.adb:12:7] ([#"reactor.adb" 12 0 0] (if (( ([#"reactor.adb" 12 0 0] [#"reactor.adb" 12 0 0] (([@branch_id=2370] Main.spark__branch).bool__content <- ( (Boolean.orb(((Reactor__waterlevel__rep.to_rep({ Reactor__reactorstate.__split_fields = Reactor__increasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__water)) < (10 : int))) (((Reactor__temperaturelevel__rep.to_rep({ Reactor__reactorstate.__split_fields = Reactor__increasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__temp)) = (100 : int)))) )));
     ( [@branch_id=2370] Main.spark__branch ).bool__content )) then (
      ( ();
      ( [@GP_Sloc:reactor.adb:13:25] ([#"reactor.adb" 13 0 0] (let temp___201 [@mlw:proxy_symbol] [@introduced] = (let temp___200 [@mlw:proxy_symbol] [@introduced] = { Reactor__reactorstate.__split_fields = Reactor__increasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content } in (
       ( [#"reactor.adb" 13 0 0] begin ensures {true} let _ = (let _ = temp___200.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__status in (
        ()))
        in () end ;
       { ( temp___200 ) with Reactor__reactorstate.__split_fields = { ( temp___200.Reactor__reactorstate.__split_fields ) with Reactor__reactorstate.rec__reactor__reactorstate__status = (Reactor__runningoveroff__rep.of_rep((1 : int))) } } )))
       in (
       [#"reactor.adb" 13 0 0] (Reactor__increasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content <- ( temp___201.Reactor__reactorstate.__split_fields ))))
      ) ) )) else (
      ()))) );
      raise Return__exc )
    with
     Return__exc -> ()
    end;
     begin ensures {true} let _ = (let _ = (Boolean.andb(((Reactor__temperaturelevel__rep.to_rep({ Reactor__reactorstate.__split_fields = Reactor__increasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__temp)) > temp___old_202)) (((Reactor__waterlevel__rep.to_rep({ Reactor__reactorstate.__split_fields = Reactor__increasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__water)) < temp___old_203))) in (
     ()))
     in () end  )))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "decreasetemp" defined at reactor.ads:21, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Reactor__decreasetemp__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Reactor__reactorstate as Reactor__reactorstate
 use        Reactor__reactorstate___axiom as Reactor__reactorstate___axiom
 use        Reactor__decreasetemp__reactor as Reactor__decreasetemp__reactor
 use        Reactor__temperaturelevel as Reactor__temperaturelevel
 use        Reactor__temperaturelevel__rep as Reactor__temperaturelevel__rep
 use        Reactor__eleclevel as Reactor__eleclevel
 use        Reactor__eleclevel__rep as Reactor__eleclevel__rep
 use        Reactor__temperaturelevel___axiom as Reactor__temperaturelevel___axiom
 use        Reactor__waterlevel___axiom as Reactor__waterlevel___axiom
 use        Reactor__eleclevel___axiom as Reactor__eleclevel___axiom
 use        Reactor__runningoveroff___axiom as Reactor__runningoveroff___axiom
 use        Reactor__reactorstate___axiom as Reactor__reactorstate___axiom
 use        Reactor__decreasetemp__reactor___axiom as Reactor__decreasetemp__reactor___axiom

 let def [#"reactor.ads" 21 0 0][@GP_Subp:reactor.ads:21] 
   (__void_param : unit)
  requires { [#"reactor.ads" 21 0 0] true }
  ensures { [#"reactor.ads" 21 0 0] ([#"reactor.ads" 23 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@comment:     Post => reactor.temp < reactor.temp'Old and reactor.electricity < reactor.electricity'Old;              ^ reactor.ads:23:14:VC_POSTCONDITION] [@GP_Sloc:reactor.ads:23:14] [@model_vc_post] [@GP_Shape:pragargs__and] [@GP_Id:6] ( ( [@GP_Sloc:reactor.ads:23:14] [@GP_Pretty_Ada:2709] ((Reactor__temperaturelevel__rep.to_rep { Reactor__reactorstate.__split_fields = Reactor__decreasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__temp) < (Reactor__temperaturelevel__rep.to_rep (old { Reactor__reactorstate.__split_fields = Reactor__decreasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__temp ))) ) /\ ( [@GP_Sloc:reactor.ads:23:50] [@GP_Pretty_Ada:2719] ((Reactor__eleclevel__rep.to_rep { Reactor__reactorstate.__split_fields = Reactor__decreasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__electricity) < (Reactor__eleclevel__rep.to_rep (old { Reactor__reactorstate.__split_fields = Reactor__decreasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__electricity ))) ) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram reactor.ads:21 *)
  ;
   assume {  (Reactor__reactorstate___axiom.dynamic_invariant { Reactor__reactorstate.__split_fields = Reactor__decreasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram reactor.ads:21 *)
  ;
  () (* Check for RTE in the Pre of the subprogram reactor.ads:21 *)
  ;
   begin ensures {true} let _ = (let _ = (Boolean.andb(((Reactor__temperaturelevel__rep.to_rep({ Reactor__reactorstate.__split_fields = Reactor__decreasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__temp)) >= (20 : int))) (((Reactor__eleclevel__rep.to_rep({ Reactor__reactorstate.__split_fields = Reactor__decreasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__electricity)) >= (200 : int)))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram reactor.ads:21 *)
  ;
   assume {  ( ( [@GP_Pretty_Ada:2695] ((Reactor__temperaturelevel__rep.to_rep { Reactor__reactorstate.__split_fields = Reactor__decreasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__temp) >= (20 : int)) ) /\ ( [@GP_Pretty_Ada:2701] ((Reactor__eleclevel__rep.to_rep { Reactor__reactorstate.__split_fields = Reactor__decreasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__electricity) >= (200 : int)) ) ) };
   begin ensures {true} let _ = (let _ = { Reactor__reactorstate.__split_fields = Reactor__decreasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__electricity in (
   ()))
   in () end ;
  (let temp___old_209 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
  ensures { (result = (Reactor__eleclevel__rep.to_rep { Reactor__reactorstate.__split_fields = Reactor__decreasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__electricity))} 
  in _f) in (
   (  begin ensures {true} let _ = (let _ = { Reactor__reactorstate.__split_fields = Reactor__decreasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__temp in (
    ()))
    in () end ;
   (let temp___old_208 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
   ensures { (result = (Reactor__temperaturelevel__rep.to_rep { Reactor__reactorstate.__split_fields = Reactor__decreasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__temp))} 
   in _f) in (
    (  try
     ( ();
     ( [@GP_Sloc:reactor.adb:21:20] ([#"reactor.adb" 21 0 0] (let temp___205 [@mlw:proxy_symbol] [@introduced] = (let temp___204 [@mlw:proxy_symbol] [@introduced] = { Reactor__reactorstate.__split_fields = Reactor__decreasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content } in (
      ( [#"reactor.adb" 21 0 0] begin ensures {true} let _ = (let _ = temp___204.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__temp in (
       ()))
       in () end ;
      { ( temp___204 ) with Reactor__reactorstate.__split_fields = { ( temp___204.Reactor__reactorstate.__split_fields ) with Reactor__reactorstate.rec__reactor__reactorstate__temp = (Reactor__temperaturelevel__rep.of_rep(([#"reactor.adb" 21 0 0] ( [@vc:annotation] [@GP_Shape:reactor_assign__sub] [@comment:      reactor.temp := reactor.temp - 20;                                    ^ reactor.adb:21:36:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:reactor.adb:21:36] [@GP_Id:4] (Reactor__temperaturelevel.range_check_(((Reactor__temperaturelevel__rep.to_rep({ Reactor__reactorstate.__split_fields = Reactor__decreasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__temp)) - (20 : int)))) )))) } } )))
      in (
       (Reactor__decreasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content <- ( temp___205.Reactor__reactorstate.__split_fields ))))
     ) );
     ( [@GP_Sloc:reactor.adb:22:27] ([#"reactor.adb" 22 0 0] (let temp___207 [@mlw:proxy_symbol] [@introduced] = (let temp___206 [@mlw:proxy_symbol] [@introduced] = { Reactor__reactorstate.__split_fields = Reactor__decreasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content } in (
      ( [#"reactor.adb" 22 0 0] begin ensures {true} let _ = (let _ = temp___206.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__electricity in (
       ()))
       in () end ;
      { ( temp___206 ) with Reactor__reactorstate.__split_fields = { ( temp___206.Reactor__reactorstate.__split_fields ) with Reactor__reactorstate.rec__reactor__reactorstate__electricity = (Reactor__eleclevel__rep.of_rep(([#"reactor.adb" 22 0 0] ( [@GP_Sloc:reactor.adb:22:50] [@vc:annotation] [@GP_Shape:reactor_assign__sub] [@comment:      reactor.electricity := reactor.electricity - 200;                                                  ^ reactor.adb:22:50:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:5] (Reactor__eleclevel.range_check_(((Reactor__eleclevel__rep.to_rep({ Reactor__reactorstate.__split_fields = Reactor__decreasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__electricity)) - (200 : int)))) )))) } } )))
      in (
       (Reactor__decreasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content <- ( temp___207.Reactor__reactorstate.__split_fields ))))
     ) );
      raise Return__exc )
    with
     Return__exc -> ()
    end;
     begin ensures {true} let _ = (let _ = (Boolean.andb(((Reactor__temperaturelevel__rep.to_rep({ Reactor__reactorstate.__split_fields = Reactor__decreasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__temp)) < temp___old_208)) (((Reactor__eleclevel__rep.to_rep({ Reactor__reactorstate.__split_fields = Reactor__decreasetemp__reactor.reactor__split_fields.Reactor__reactorstate.__split_fields__content }.Reactor__reactorstate.__split_fields.Reactor__reactorstate.rec__reactor__reactorstate__electricity)) < temp___old_209))) in (
     ()))
     in () end  )))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "initialreactorstate" defined at reactor.ads:25, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Reactor__initialreactorstate__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Reactor__reactorstate as Reactor__reactorstate
 use        Reactor__reactorstate___axiom as Reactor__reactorstate___axiom
 use        Reactor__initialreactorstate__initialstate as Reactor__initialreactorstate__initialstate
 use        Reactor__temperaturelevel as Reactor__temperaturelevel
 use        Reactor__waterlevel as Reactor__waterlevel
 use        Reactor__eleclevel as Reactor__eleclevel
 use        Reactor__runningoveroff as Reactor__runningoveroff
 use        Reactor__runningoveroff__rep as Reactor__runningoveroff__rep
 use        Reactor__initialreactorstate__initialstate___axiom as Reactor__initialreactorstate__initialstate___axiom
 use        Reactor__temperaturelevel___axiom as Reactor__temperaturelevel___axiom
 use        Reactor__waterlevel___axiom as Reactor__waterlevel___axiom
 use        Reactor__eleclevel___axiom as Reactor__eleclevel___axiom
 use        Reactor__runningoveroff___axiom as Reactor__runningoveroff___axiom
 use        Reactor__reactorstate___axiom as Reactor__reactorstate___axiom

 val reactor__initialreactorstate__result [@model_projected] [@name:initialReactorState] [@model_trace:2724@result]  : Reactor__reactorstate.reactorstate__ref 
 
 let def [#"reactor.ads" 25 0 0][@GP_Subp:reactor.ads:25] 
   (__void_param : unit)
  requires { [#"reactor.ads" 25 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram reactor.ads:25 *)
  ;
  () (* Declarations introduced by the compiler at the beginning of the subprogram reactor.ads:25 *)
  ;
  () (* Check for RTE in the Pre of the subprogram reactor.ads:25 *)
  ;
  [#"reactor.ads" 25 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram reactor.ads:25 *)
  ;
  [#"reactor.ads" 25 0 0] try
   ( ();
   ([#"reactor.adb" 26 0 0] ( (let reactor__initialreactorstate__initialstate__assume = { Reactor__reactorstate.__split_fields = { Reactor__reactorstate.rec__reactor__reactorstate__temp = ( 60 : Reactor__temperaturelevel.temperaturelevel ); Reactor__reactorstate.rec__reactor__reactorstate__water = ( 100 : Reactor__waterlevel.waterlevel ); Reactor__reactorstate.rec__reactor__reactorstate__electricity = ( 500 : Reactor__eleclevel.eleclevel ); Reactor__reactorstate.rec__reactor__reactorstate__status = (Reactor__runningoveroff__rep.of_rep((0 : int))) } } in (
    [#"reactor.adb" 26 0 0] (Reactor__initialreactorstate__initialstate.initialstate__split_fields.Reactor__reactorstate.__split_fields__content <- ( reactor__initialreactorstate__initialstate__assume.Reactor__reactorstate.__split_fields ))))
   ;
   [#"reactor.adb" 26 0 0] assume { [#"reactor.adb" 26 0 0] (Reactor__reactorstate___axiom.dynamic_invariant { Reactor__reactorstate.__split_fields = Reactor__initialreactorstate__initialstate.initialstate__split_fields.Reactor__reactorstate.__split_fields__content } True False True True) } ));
   ();
   ( [@GP_Sloc:reactor.adb:28:14] ([#"reactor.adb" 28 0 0] ()) );
   ( [@GP_Sloc:reactor.adb:28:7] ([#"reactor.adb" 28 0 0] ( [#"reactor.adb" 28 0 0] (reactor__initialreactorstate__result.Reactor__reactorstate.reactorstate__content <- ( { Reactor__reactorstate.__split_fields = Reactor__initialreactorstate__initialstate.initialstate__split_fields.Reactor__reactorstate.__split_fields__content } ));
   [#"reactor.adb" 28 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  reactor__initialreactorstate__result.Reactor__reactorstate.reactorstate__content )
end
